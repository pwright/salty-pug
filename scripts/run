#!/usr/bin/python3

from plano import *

store_id = "store-1"
store_host = "localhost"
store_port = str(get_random_port())

factory_id = "factory-1"
factory_host = "localhost"
factory_port = str(get_random_port())

console_host = "localhost"
console_port = str(8080)

ENV["STORE_SERVICE_STORE_ID"] = store_id
ENV["STORE_SERVICE_STORE_ID_OVERRIDE"] = store_host
ENV["STORE_SERVICE_HOST"] = store_host
ENV["STORE_SERVICE_PORT"] = store_port
ENV["STORE_SERVICE_ALL_HOST"] = store_host
ENV["STORE_SERVICE_ALL_PORT"] = store_port

ENV["FACTORY_SERVICE_FACTORY_ID"] = factory_id
ENV["FACTORY_SERVICE_HOST"] = factory_host
ENV["FACTORY_SERVICE_PORT"] = factory_port
ENV["FACTORY_SERVICE_ANY_HOST"] = factory_host
ENV["FACTORY_SERVICE_ANY_PORT"] = factory_port

ENV["CONSOLE_SERVICE_HOST"] = console_host
ENV["CONSOLE_SERVICE_PORT"] = console_port

args = {
    "--rm",
    "--network host",
    "-e STORE_SERVICE_STORE_ID",
    "-e STORE_SERVICE_STORE_ID_OVERRIDE",
    "-e STORE_SERVICE_HOST",
    "-e STORE_SERVICE_PORT",
    "-e STORE_SERVICE_ALL_HOST",
    "-e STORE_SERVICE_ALL_PORT",
    "-e FACTORY_SERVICE_FACTORY_ID",
    "-e FACTORY_SERVICE_HOST",
    "-e FACTORY_SERVICE_PORT",
    "-e FACTORY_SERVICE_ANY_HOST",
    "-e FACTORY_SERVICE_ANY_PORT",
    "-e CONSOLE_SERVICE_HOST",
    "-e CONSOLE_SERVICE_PORT",
}

args = " ".join(args)

try:
    with start_process(f"docker run {args} quay.io/skupper/salty-pug-store"):
        with start_process(f"docker run {args} quay.io/skupper/salty-pug-factory"):
            with start_process(f"docker run {args} quay.io/skupper/salty-pug-console"):
                sleep(1) # XXX readiness checks

                with working_env(PYTHONPATH="."):
                    call("scripts/generate-data")

                while True:
                    sleep(1)
except KeyboardInterrupt:
    pass
